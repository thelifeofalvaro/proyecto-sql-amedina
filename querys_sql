1. Crea el esquema de la BBDD. 

2. Muestra los nombres de todas las películas con una clasificación por
edades de ‘R’.
	-- Si queremos que aparezcan titulo y clasificación:
	
	select title as "Titulo" , rating "Clasificiación Edad"
	from film
	where rating = 'R'
	-- Si solo queremos que aparezcan las películas con ese rating, sin que aparezca la columna con el nombre del rating:
	select title as "Titulo"
	from film
	where rating = 'R';

3. Encuentra los nombres de los actores que tengan un “actor_id” entre 30
y 40.
	-- Monstrando nombre + actor_id para comprobar que es correcta la query
	SELECT actor_id, first_name
	FROM actor
	WHERE actor_id BETWEEN 30 AND 40;	
	-- Si queremos cumplir a rajatabla el ejercicio:
	SELECT first_name
	FROM actor
	WHERE actor_id BETWEEN 30 AND 40;

4. Obtén las películas cuyo idioma coincide con el idioma original.
	SELECT 
    		title,
    		language_id,
    		original_language_id
	FROM 
   		film
	WHERE 
    		language_id = original_language_id;
5. Ordena las películas por duración de forma ascendente.
	SELECT 
    		title,
    		length
	FROM 
    		film
	ORDER BY 
    		length ASC;

6. Encuentra el nombre y apellido de los actores que tengan ‘Allen’ en su
apellido.
	SELECT 
    		first_name,
    		last_name
	FROM 
    		actor
	WHERE 
    		last_name LIKE '%ALLEN%';

7. Encuentra la cantidad total de películas en cada clasificación de la tabla
“film” y muestra la clasificación junto con el recuento.
	SELECT 
    		rating, COUNT(*) as "Cantidad"
	FROM 
    		film
	GROUP BY 
    		rating;

8. Encuentra el título de todas las películas que son ‘PG-13’ o tienen una
duración mayor a 3 horas en la tabla film.

	--Consulta donde aparecen todos los resultados con la duración y categoría para ver porque salen en la consulta
	select 
		title,
		length,
		rating 
	from
		film f
	where 
		rating ='PG-13'
	or
		length >'180';
	-- Consulta respondiendo al ejercicio
	select 
		title,
	from
		film f
	where 
		rating ='PG-13'
	or
		length >'180';	

9. Encuentra la variabilidad de lo que costaría reemplazar las películas.

	-- Al no especificar el modelo de variabilidad, se resuelve mostrando las dos más útiles (Desvianción Estándar y varianza)
	SELECT 
    		VARIANCE(replacement_cost) as Varianza,
    		STDDEV(replacement_cost) as Desviacion_Estandar
	FROM 
    		film;

10. Encuentra la mayor y menor duración de una película de nuestra BBDD.

	SELECT 
    		MAX(length) AS duracion_max,
    		MIN(length) AS duracion_min
	FROM 
    		film;

11. Encuentra lo que costó el antepenúltimo alquiler ordenado por día.



12. Encuentra el título de las películas en la tabla “film” que no sean ni ‘NC-
17’ ni ‘G’ en cuanto a su clasificación.
	SELECT 
    		title
	FROM 
    		film
	WHERE 
    	rating NOT IN ('NC-17', 'G');

13. Encuentra el promedio de duración de las películas para cada
clasificación de la tabla film y muestra la clasificación junto con el
promedio de duración.

	SELECT 
		rating, avg(length) as "Promedio Duración"
	FROM 
		film
	GROUP BY 
		rating;

14. Encuentra el título de todas las películas que tengan una duración mayor
a 180 minutos.
	-- Para comprobar con los minutos
	SELECT 
		title,
		length 
	FROM 
		film
	where 
		length > '180';
	
	-- Para responder al ejercicio
	SELECT 
		title
	FROM 
		film
	where 
		length > '180';

15. ¿Cuánto dinero ha generado en total la empresa?
	SELECT 
    		SUM(amount) AS dinero_generado
	FROM 
    		payment;

16. Muestra los 10 clientes con mayor valor de id.
	SELECT 
		first_name,
		last_name
	from 
		customer c
	ORDER BY 
    		customer_id desc
	limit 10;

17. Encuentra el nombre y apellido de los actores que aparecen en la
película con título ‘Egg Igby’.

	SELECT a.first_name, a.last_name, f.title
	FROM actor a
	INNER JOIN film_actor fa ON a.actor_id = fa.actor_id
	INNER JOIN film f ON fa.film_id = f.film_id
	WHERE f.film_id = 274;

18. Selecciona todos los nombres de las películas únicos.

SELECT DISTINCT 
    title
FROM 
    film;


19. Encuentra el título de las películas que son comedias y tienen una
duración mayor a 180 minutos en la tabla “film”.

/* con la subconsulta interna se obtiene el category_id de la categoría "Comedy"
 se utiliza este category_id para filtrar los film_id en la tabla film_category 
 despues se seleccionan los títulos de las películas de la tabla film que tienen una duracion mayor a 180 minutos
 y pertenecen a la categoría de comedia */

SELECT title
FROM film
WHERE film_id IN (
    SELECT film_id
    FROM film_category
    WHERE category_id = (
        SELECT category_id
        FROM category
        WHERE name = 'Comedy'
    )
)
AND length > 180;

20. Encuentra las categorías de películas que tienen un promedio de
duración superior a 110 minutos y muestra el nombre de la categoría
junto con el promedio de duración.

 -- se necesita unir las tablas film, film_category y category, y luego agrupar por categoría calculando el promedio de duración
 
SELECT c.name AS category_name, AVG(f.length) AS average_duration
	FROM category c
	INNER JOIN film_category fc ON c.category_id = fc.category_id
	INNER JOIN film f ON fc.film_id = f.film_id
		GROUP BY c.category_id, c.name
		HAVING AVG(f.length) > 110;

21. ¿Cuál es la media de duración del alquiler de las películas?

SELECT 
    AVG(rental_duration) AS "Media duración alquiler"
FROM 
    film;

22. Crea una columna con el nombre y apellidos de todos los actores y
actrices.

SELECT
    CONCAT(first_name, ' ', last_name) AS "Nombre Completo"
FROM 
    actor;

23. Números de alquiler por día, ordenados por cantidad de alquiler de
forma descendente.

SELECT 
    rental_date::date AS "Fecha alquiler",
    COUNT(*) AS "Cantidad de alquileres"
FROM 
    rental
GROUP BY 
    rental_date::date
ORDER BY 
    "Cantidad de alquileres" DESC;

24. Encuentra las películas con una duración superior al promedio.

SELECT 
    title, 
    length
FROM 
    film
WHERE 
    length > (
    	SELECT 
    		AVG(length) 
    	FROM film
    	)
ORDER BY 
    length DESC;

25. Averigua el número de alquileres registrados por mes.

SELECT 
    TO_CHAR(rental_date, 'YYYY-MM') AS Mes,
    COUNT(*) AS "Numero de alquileres"
FROM 
    rental
GROUP BY 
    TO_CHAR(rental_date, 'YYYY-MM')
ORDER BY 
    Mes;

26. Encuentra el promedio, la desviación estándar y varianza del total
pagado.

-- Hago una consulta  multiple para responder a las tres cosas en una sola tabla. Uso comillas para los alias para declarar que calculo en cada uno

SELECT 
    AVG(amount) AS "Promedio",                  
    STDDEV(amount) AS "Desviación Standard",    
    VAR_SAMP(amount) AS "Varianza"              
FROM 
    payment;

27. ¿Qué películas se alquilan por encima del precio medio?

SELECT 
	title, 
	rental_rate 
FROM 
	film 
WHERE 
	rental_rate > (
	SELECT 
		AVG(rental_rate) 
	FROM 
		film
	)
ORDER BY 
	rental_rate DESC;

28. Muestra el id de los actores que hayan participado en más de 40
películas.

SELECT 
	fa.actor_id, 
    COUNT(fa.film_id) AS film_count
FROM 
    film_actor fa
GROUP BY 
    fa.actor_id
HAVING 
    COUNT(fa.film_id) > 40;

29. Obtener todas las películas y, si están disponibles en el inventario,
mostrar la cantidad disponible.

SELECT 
	f.title, 
    COUNT(i.inventory_id) AS "Unidades Stock"
FROM 
	film f
LEFT JOIN 
	inventory i ON f.film_id = i.film_id
GROUP BY 
	f.title;

30. Obtener los actores y el número de películas en las que ha actuado.

 SELECT 
	a.actor_id, 
	CONCAT(a.first_name, ' ', a.last_name) AS "Nombre Actor", 
	COUNT(fa.film_id) as "Peliculas"
FROM 
	actor a
LEFT JOIN 
	film_actor fa ON a.actor_id = fa.actor_id
GROUP BY 
	a.actor_id, a.first_name, a.last_name;

31. Obtener todas las películas y mostrar los actores que han actuado en
ellas, incluso si algunas películas no tienen actores asociados.

SELECT 
    f.title AS Titulo, 
    CONCAT(a.first_name, ' ', a.last_name) AS "Nombre Actor"
FROM 
    film f
LEFT JOIN 
    film_actor fa ON f.film_id = fa.film_id
LEFT JOIN 
    actor a ON fa.actor_id = a.actor_id
ORDER BY 
    f.title, a.last_name;

32. Obtener todos los actores y mostrar las películas en las que han
actuado, incluso si algunos actores no han actuado en ninguna película.

SELECT 
	a.actor_id, 
	CONCAT(a.first_name, ' ', a.last_name) AS "Nombre Actor", 
    COUNT(fa.film_id) AS "Total Peliculas"
FROM 
	actor a
LEFT JOIN 
	film_actor fa ON a.actor_id = fa.actor_id
GROUP BY 
	a.actor_id, a.first_name, a.last_name;

33. Obtener todas las películas que tenemos y todos los registros de
alquiler.

SELECT 
	f.title AS "Titulo Pelicula", 
    	r.rental_date
FROM 
	film f
LEFT JOIN 
	inventory i ON f.film_id = i.film_id
LEFT JOIN 
	rental r ON i.inventory_id = r.inventory_id;

34. Encuentra los 5 clientes que más dinero se hayan gastado con nosotros.

SELECT 
	c.customer_id, 
    CONCAT(c.first_name, ' ', c.last_name) AS "Nombre Cliente", 
    SUM(p.amount) AS "Total Gastado"
FROM 
	customer c
JOIN 
	payment p ON c.customer_id = p.customer_id
GROUP BY 
	c.customer_id, c.first_name, c.last_name
ORDER BY 
	"Total Gastado"  DESC
LIMIT 5;

35. Selecciona todos los actores cuyo primer nombre es 'Johnny'.

SELECT 
	actor_id, 
	first_name AS Nombre, 
	last_name AS Apellido
FROM 
	actor 
WHERE 
	first_name = 'JOHNNY';

36. Renombra la columna “first_name” como Nombre y “last_name” como
Apellido.

SELECT 
	actor_id,
	first_name AS Nombre, 
	last_name AS Apellido 
FROM 
	actor;

37. Encuentra el ID del actor más bajo y más alto en la tabla actor.

SELECT 
	MIN(actor_id) AS "Id más bajo actor", 
	MAX(actor_id) AS "Id más alto actor"
FROM 
	actor;

38. Cuenta cuántos actores hay en la tabla “actor”.

SELECT 
	COUNT(*) AS "Total de Actores"
FROM 
	actor;

39. Selecciona todos los actores y ordénalos por apellido en orden
ascendente.

SELECT 
	actor_id, 
	first_name, 
	last_name 
FROM 
	actor
ORDER BY 
	last_name ASC;

40. Selecciona las primeras 5 películas de la tabla “film”.

-- Se consulta con el film_id para comprobar que salen las 5 primeras peliculas de la BBDD

 SELECT 
 	film_id, 
 	title 
 FROM 
 	film
 ORDER BY 
 	film_id 
 LIMIT 5;

-- Pero la consulta también se puede hacer sin usar ese campo

 SELECT 
 	title 
 FROM 
 	film
 ORDER BY 
 	film_id 
 LIMIT 5;

41. Agrupa los actores por su nombre y cuenta cuántos actores tienen el
mismo nombre. ¿Cuál es el nombre más repetido?

WITH nombre_conteo AS (
    SELECT 
        first_name, 
        COUNT(*) AS "Conteo Nombre"
    FROM 
    	actor
    GROUP BY 
    	first_name
)
SELECT 
	first_name, 
	"Conteo Nombre"
FROM nombre_conteo
WHERE 
	"Conteo Nombre" = (
		SELECT 
			MAX("Conteo Nombre") 
		FROM 
			nombre_conteo
		)
ORDER BY 
	first_name ASC;


42. Encuentra todos los alquileres y los nombres de los clientes que los
realizaron.

-- Identificamos los alquileres por su  id (rental_id) y los relacionamos con los nombres (completos en mi caso) de los clientes mediante un JOIN de las tablas rental y customer

SELECT 
	r.rental_id, 
	CONCAT(c.first_name, ' ', c.last_name) AS "Nombre cliente"
FROM 
	rental r
JOIN 
	customer c 
ON 
	r.customer_id = c.customer_id;

43. Muestra todos los clientes y sus alquileres si existen, incluyendo
aquellos que no tienen alquileres.

-- Seleccionamos nombre (completo en mi caso) y el total de alquileres (mediante su id) y  los agrupamos con un LEFT JOIN para garantizar que aparecen todos los clientes y los agrupamos por su nombre ("Nombre cliente") para crear un único registro por cada uno

SELECT 
	CONCAT(c.first_name, ' ', c.last_name) AS "Nombre Cliente", 
	COUNT (r.rental_id) as "Total Alquileres"
FROM 
	customer c
LEFT JOIN 
	rental r 
ON 
	c.customer_id = r.customer_id
GROUP BY
	"Nombre Cliente";

44. Realiza un CROSS JOIN entre las tablas film y category. ¿Aporta valor
esta consulta? ¿Por qué? Deja después de la consulta la contestación.

SELECT 
	f.title, 
	c.name AS "Nombre Categoria" 
FROM 
	film f 
CROSS JOIN 
	category c;

-- No tiene sentido ni aporta ningún valor, ya que el CROSS JOIN únicamente devuelve la combinación de cada una de las filas de la primera tabla (film) con la segunda (category) sin que ninguna condición relacione ambos datos

45. Encuentra los actores que han participado en películas de la categoría
'Action'.
-- Seleccionamos los nombres (completos) de los actores como valores únicos, y vamos haciendo distintos joins recorriendo el camino hasta llegar a la tabla donde se muestra la categoría, para filtrar solo por "Action"

SELECT DISTINCT 
	CONCAT(a.first_name, ' ', a.last_name) AS "Nombre Actor"
FROM 
	actor a
JOIN 
	film_actor fa 
ON 
	a.actor_id = fa.actor_id
JOIN 
	film_category fc 
ON 
	fa.film_id = fc.film_id
JOIN 
	category c
ON 
	fc.category_id = c.category_id
WHERE 
	c.name = 'Action';

46. Encuentra todos los actores que no han participado en películas.

-- Realizamos la consulta de todos los actores que han participado en peliculas y tras el LEFT JOIN (Para que aparezcan todos los actores, que es la tabla principal), establecemos mediante la clausula IS NULL el criterio de que no hayan aparecido en peliculas

 SELECT 
 	CONCAT(a.first_name, ' ', a.last_name) AS actor_name
FROM
	actor a
LEFT JOIN
	film_actor fa 
ON 
	a.actor_id = fa.actor_id
WHERE
	fa.film_id IS NULL


47. Selecciona el nombre de los actores y la cantidad de películas en las
que han participado.

-- Seleccionamos el nombre (Completo en este caso), y el conteo de las peliculas mediante un LEFT JOIN de la tabla Actor (tabla ppal) y film_actor, para por ultimo agrupar por ID, nombre y apellido

SELECT 
	CONCAT(a.first_name, ' ', a.last_name) AS "Nombre Actor", 
	COUNT(fa.film_id) AS "Peliculas"
FROM 
	actor a
LEFT JOIN 
	film_actor fa 
ON 
	a.actor_id = fa.actor_id
GROUP BY 
	a.actor_id, a.first_name, a.last_name;


48. Crea una vista llamada “actor_num_peliculas” que muestre los nombres
de los actores y el número de películas en las que han participado.

-- Rescatando la query anterior, agregamos al principio el comando para crear la vista

CREATE VIEW actor_num_peliculas AS

-- Quedando la query como a continuación:

CREATE VIEW actor_num_peliculas AS
SELECT 
	CONCAT(a.first_name, ' ', a.last_name) AS "Nombre Actor", 
	COUNT(fa.film_id) AS "Numero Peliculas"
FROM 
	actor a
LEFT JOIN 
	film_actor fa 
ON 
	a.actor_id = fa.actor_id
GROUP BY 
	a.actor_id, a.first_name, a.last_name;

-- Por ultimo para comprobar que la vista funciona y muestra lo que queremos, realizamos esta query:

SELECT *
FROM 
	actor_num_peliculas;

49. Calcula el número total de alquileres realizados por cada cliente.

SELECT
    CONCAT(c.first_name, ' ', c.last_name) AS "Nombre Cliente", 
    COUNT(r.rental_id) AS "Total Alquileres"
FROM 
	customer c
LEFT JOIN 
	rental r 
ON 
	c.customer_id = r.customer_id
GROUP BY 
	c.customer_id, c.first_name, c.last_name;

50. Calcula la duración total de las películas en la categoría 'Action'.

SELECT 
	SUM(f.length) AS "Duración Total"
FROM 
	film f
JOIN 
	film_category fc 
ON 
	f.film_id = fc.film_id
JOIN 
	category c 
ON 
	fc.category_id = c.category_id
WHERE 
	c.name = 'Action'

51. Crea una tabla temporal llamada “cliente_rentas_temporal” para
almacenar el total de alquileres por cliente.

WITH cliente_rentas_temporal AS (
    SELECT 
        customer_id, 
        COUNT(rental_id) AS "Alquileres Totales"
    FROM rental
    GROUP BY customer_id
)
SELECT * 
FROM cliente_rentas_temporal;

52. Crea una tabla temporal llamada “peliculas_alquiladas” que almacene las
películas que han sido alquiladas al menos 10 veces.

WITH peliculas_alquiladas_cte AS (
    SELECT 
        i.film_id, 
        f.title, 
        COUNT(r.rental_id) AS total_alquileres
    FROM rental r
    JOIN inventory i ON r.inventory_id = i.inventory_id
    JOIN film f ON i.film_id = f.film_id
    GROUP BY i.film_id, f.title
    HAVING COUNT(r.rental_id) >= 10
SELECT * 
FROM 
	peliculas_alquiladas_cte;


53. Encuentra el título de las películas que han sido alquiladas por el cliente
con el nombre ‘Tammy Sanders’ y que aún no se han devuelto. Ordena
los resultados alfabéticamente por título de película.

select
	f.title 
from
	rental r
join
	inventory i 
ON 
	r.inventory_id = i.inventory_id
JOIN 
	film f 
ON 
	i.film_id = f.film_id
JOIN 
	customer c 
ON 
	r.customer_id = c.customer_id
WHERE 
	CONCAT(c.first_name, ' ', c.last_name) = 'TAMMY SANDERS' 
AND 
	r.return_date IS null
ORDER BY 
	f.title;

54. Encuentra los nombres de los actores que han actuado en al menos una
película que pertenece a la categoría ‘Sci-Fi’. Ordena los resultados
alfabéticamente por apellido.

SELECT DISTINCT 
	a.first_name AS Nombre,
	a.last_name AS Apellido
FROM 
	actor a
JOIN 
	film_actor fa ON a.actor_id = fa.actor_id
JOIN 
	film f ON fa.film_id = f.film_id
JOIN 
	film_category fc ON f.film_id = fc.film_id
JOIN 
	category c ON fc.category_id = c.category_id
WHERE 
	c.name = 'Sci-Fi'
ORDER BY 
	a.last_name, a.first_name;

55. Encuentra el nombre y apellido de los actores que han actuado en
películas que se alquilaron después de que la película ‘Spartacus
Cheaper’ se alquilara por primera vez. Ordena los resultados
alfabéticamente por apellido.

WITH 
	primer_alquiler_spartacus AS (
    	SELECT 
    		MIN(r.rental_date) AS "Primer Alquiler"
    	FROM 
    		rental r
    	JOIN 
    		inventory i 
    	ON 
    		r.inventory_id = i.inventory_id
    	JOIN 
    		film f 
    	ON 
    		i.film_id = f.film_id
    	WHERE 
    		f.title = 'SPARTACUS CHEAPER'
)
SELECT DISTINCT 
	a.first_name AS Nombre,
	a.last_name AS Apellido
FROM 
	actor a
JOIN 
	film_actor fa 
ON 
	a.actor_id = fa.actor_id
JOIN 
	inventory i 
ON 
	fa.film_id = i.film_id
JOIN 
	rental r 
ON 
	i.inventory_id = r.inventory_id
WHERE 
	r.rental_date > (
	SELECT 
		"Primer Alquiler"
	FROM 
		primer_alquiler_spartacus
	)
ORDER BY 
	a.last_name;

56. Encuentra el nombre y apellido de los actores que no han actuado en
ninguna película de la categoría ‘Music’.

SELECT DISTINCT  
 	CONCAT(a.first_name, ' ', a.last_name) AS "Nombre Actor"
FROM 
	actor a
WHERE 
	a.actor_id NOT IN (
        SELECT fa.actor_id
        FROM film_actor fa
        JOIN film_category fc ON fa.film_id = fc.film_id
        JOIN category c ON fc.category_id = c.category_id
        WHERE c.name = 'Music'
   );

57. Encuentra el título de todas las películas que fueron alquiladas por más
de 8 días.

SELECT DISTINCT 
    f.title 
FROM 
    rental r
JOIN 
    inventory i 
ON 
    r.inventory_id = i.inventory_id
JOIN 
    film f 
ON 
    i.film_id = f.film_id
WHERE 
    r.return_date IS NOT NULL -- Filtra solo los registros con devolución
    AND EXTRACT(DAY FROM (r.return_date - r.rental_date)) > 8
ORDER BY 
    f.title;

58. Encuentra el título de todas las películas que son de la misma categoría
que ‘Animation’.

SELECT DISTINCT 
	f.title
FROM 
	film f
JOIN 
	film_category fc 
ON 
	f.film_id = fc.film_id
WHERE 
	fc.category_id = (
        SELECT category_id
        FROM category
        WHERE name = 'Animation'
        );

59. Encuentra los nombres de las películas que tienen la misma duración
que la película con el título ‘Dancing Fever’. Ordena los resultados
alfabéticamente por título de película.

SELECT title 
FROM film 
WHERE length = (
    SELECT length 
    FROM film 
    WHERE title = 'DANCING FEVER'
)
ORDER BY title;

60. Encuentra los nombres de los clientes que han alquilado al menos 7
películas distintas. Ordena los resultados alfabéticamente por apellido.

SELECT DISTINCT 
	c.first_name as Nombre, 
	c.last_name as Apellido
FROM
	customer c
JOIN 
	rental r 
ON 
	c.customer_id = r.customer_id
JOIN 
	inventory i 
ON 
	r.inventory_id = i.inventory_id
JOIN 
	film f 
ON 
	i.film_id = f.film_id
GROUP BY 
	c.customer_id, c.first_name, c.last_name
HAVING COUNT(DISTINCT f.film_id) >= 7
ORDER BY 
	c.last_name;

61. Encuentra la cantidad total de películas alquiladas por categoría y
muestra el nombre de la categoría junto con el recuento de alquileres.

SELECT 
	cat.name AS "Categoría Pelicula", 
	COUNT(r.rental_id) AS "Recuento Alquileres"
FROM 
	rental r
JOIN 
	inventory i 
ON 
	r.inventory_id = i.inventory_id
join
	film f 
ON 
	i.film_id = f.film_id
join
	film_category fc 
ON 
	f.film_id = fc.film_id
JOIN 
	category cat 
ON 
	fc.category_id = cat.category_id
GROUP BY 
	cat.name
ORDER BY 
	"Recuento Alquileres" DESC;


62. Encuentra el número de películas por categoría estrenadas en 2006.

SELECT 
	cat.name AS "Categoria Pelicula", 
	COUNT(f.film_id) AS "Numero Peliculas"
FROM 
	film f
JOIN 
	film_category fc 
on
	f.film_id = fc.film_id
JOIN 
	category cat 
ON 
	fc.category_id = cat.category_id
WHERE 
	f.release_year = 2006
GROUP BY 
	cat.name
ORDER BY 
	"Numero Peliculas" DESC;

63. Obtén todas las combinaciones posibles de trabajadores con las tiendas
que tenemos.

SELECT 
    s.staff_id, 
    CONCAT(s.first_name, ' ', s.last_name) AS "Nombre Empleado", 
    st.store_id
FROM 
	staff s
CROSS JOIN 
	store st
ORDER BY 
	s.staff_id, st.store_id;

64. Encuentra la cantidad total de películas alquiladas por cada cliente y
muestra el ID del cliente, su nombre y apellido junto con la cantidad de
películas alquiladas.

SELECT 
    c.customer_id,
    c.first_name AS Nombre,
    c.last_name AS Apellido, 
    COUNT(r.rental_id) AS "Alquileres totales"
FROM 
	customer c
LEFT JOIN 
	rental r 
ON 
	c.customer_id = r.customer_id
GROUP BY 
	c.customer_id, c.first_name, c.last_name
ORDER BY 
	"Alquileres totales" DESC;
