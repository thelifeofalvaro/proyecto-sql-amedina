-- 1. Crea el esquema de la BBDD. 
-- Consultar Archivo
-- 2. Muestra los nombres de todas las películas con una clasificación por edades de ‘R’.

SELECT -- Se selecciona la columna que nos interesa
	title as "Titulo" -- Se le asigna un alias traducido al castellano
FROM 
	film --Tabla de la que se recoge la columna
WHERE 
	rating = 'R'; --Se hace la selección de rating de esta forma para poder reutilizar la consulta cambian solo el rating por el que nos interese

-- 3. Encuentra los nombres de los actores que tengan un “actor_id” entre 30 y 40.

SELECT 
	first_name -- Seleccionamos la columna...
FROM 
	actor -- ...de la tabla que nos interesa
WHERE 
	actor_id BETWEEN 30 AND 40; -- Filtramos por los requisitos que nos piden

-- 4. Obtén las películas cuyo idioma coincide con el idioma original.

SELECT  -- Seleccionamos las columnas adecuadas
	title,
    	language_id,
    	original_language_id
FROM 
	film -- de la tabla que nos interesa
WHERE 
	language_id = original_language_id; -- Establecemos la clausula de filtrado

-- 5. Ordena las películas por duración de forma ascendente.

SELECT  -- Seleccionamos las columnas que nos interesan
	title,
	length
FROM -- De la table correspondiente
	film
ORDER BY  -- Establecemos el filtro
	length ASC; -- Se coloca el orden de clasificación para cumplir con el enunciado, ya que por defecto esta clausula ordena el resultado de forma ascendente

-- 6. Encuentra el nombre y apellido de los actores que tengan ‘Allen’ en su apellido.

SELECT -- Seleccionamos las columnas que nos interesan
	first_name,
    	last_name
FROM -- De la table correspondiente
	actor
WHERE   -- Establecemos el filtro
	last_name LIKE '%ALLEN%'; -- Se usa el carácter comodin '%' para buscar todos los actores que contengan 'ALLEN' en su apellido

-- 7. Encuentra la cantidad total de películas en cada clasificación de la tabla “film” y muestra la clasificación junto con el recuento.
SELECT -- Seleccionamos las columnas que nos interesan
	rating, 
	COUNT(*) as "Cantidad" -- Se usa la clausula COUNT (*) para contar el total de peliculas por rating y se establece alias en castellano
FROM -- De la table correspondiente
	film
GROUP BY -- Establecemos el filtro
	rating;

-- 8. Encuentra el título de todas las películas que son ‘PG-13’ o tienen una duración mayor a 3 horas en la tabla film.

--Esta consulta muestra todas la peliculas que cumplan tanto uno como otro "filtro"
SELECT -- Seleccionamos las columnas que nos interesan
	title,
FROM -- De la table correspondiente
	film
WHERE -- Establecemos un filtro
	rating ='PG-13'
OR -- Establecemos otro filtro simultaneo
	length >'180';	

-- 9. Encuentra la variabilidad de lo que costaría reemplazar las películas.

-- Al no especificar el modelo de variabilidad, se resuelve mostrando las dos más útiles (Desvianción Estándar y varianza)

SELECT  -- Seleccionamos las columnas que nos interesan
	VARIANCE(replacement_cost) AS "Varianza",
	STDDEV(replacement_cost) AS "Desviacion Estandar"
FROM -- De la table correspondiente
	film;

-- 10. Encuentra la mayor y menor duración de una película de nuestra BBDD.

SELECT -- Seleccionamos las columnas que nos interesan, aplicando ya las clausulas que buscamos
	MAX(length) AS "Duracion Max", 
	MIN(length) AS "Duracion Min"
FROM -- De la table correspondiente
	film;

-- 11. Encuentra lo que costó el antepenúltimo alquiler ordenado por día.

WITH separador_fechas AS ( -- Creo una vista temporal para separar el timestamp en fecha y hora detallada
    SELECT
        r.rental_id,
        CAST(r.rental_date AS DATE) AS "Fecha Alquiler", --Muestro solo la fecha y le pongo un alias en castellano
        CAST(r.rental_date AS TIME) AS "Hora Alquiler", --Muestro solo la hora detallada y le pongo un alias en castellano
        amount AS "Coste alquiler"
    FROM
        rental r
    INNER JOIN
        payment p
    ON
        r.rental_id = p.rental_id
),
orden_alquileres AS ( -- Creo una vista temporal para ordenar los alquileres ahora que tengo la fecha separada en dia y hora detallada
    SELECT
        rental_id,
        "Fecha Alquiler",
        "Hora Alquiler",
        "Coste alquiler",
        ROW_NUMBER() OVER ( -- Esta subconsulta me da el numero de fila... 
            PARTITION BY "Fecha Alquiler" --… dentro de cada dia… 
            ORDER BY "Hora Alquiler" DESC --…ordenado por hora (descendente)
        ) AS row_num
    FROM
        separador_fechas -- Hace mención a la vista temporal anterior
)
SELECT -- Selecciona las columnas que me interesan
	"Fecha Alquiler",
	"Hora Alquiler",
	"Coste alquiler"
FROM -- de la vista creada anterior
    orden_alquileres
WHERE
	row_num = 3 -- Selecciona la fila 3 (antepenultima por el orden descendente), se puede usar para otras consultas cambiando el numerom (1-ultimo, 2-penultimo, 3-antepenultimo, etc...)
ORDER BY
    "Fecha Alquiler" ASC,
    "Hora Alquiler" DESC;

-- 12. Encuentra el título de las películas en la tabla “film” que no sean ni ‘NC-17’ ni ‘G’ en cuanto a su clasificación.
SELECT -- Seleccionamos las columnas que nos interesan
	title
FROM -- De la table correspondiente
	film
WHERE -- Establecemos el filtro con los nombres de las categorías para que sea más fácil reutilizarlo
	rating NOT IN ('NC-17', 'G');

-- 13. Encuentra el promedio de duración de las películas para cada clasificación de la tabla film y muestra la clasificación junto con el promedio de duración.

SELECT -- Seleccionamos las columnas que nos interesan
	rating, 
	AVG(length) AS "Promedio Duración"
FROM -- De la table correspondiente
	film
GROUP BY -- Establecemos el filtro
	rating;

-- 14. Encuentra el título de todas las películas que tengan una duración mayor a 180 minutos.

SELECT  -- Seleccionamos las columnas que nos interesan
	title
FROM 
	film
WHERE -- Establecemos el filtro
	length > '180';

-- 15. ¿Cuánto dinero ha generado en total la empresa?

SELECT -- Seleccionamos las columnas que nos interesan
	SUM(amount) AS "Dinero Generado" --Clausula SUM para mostrar la suma, con un alias en castellano
FROM -- De la table correspondiente
	payment;

-- 16. Muestra los 10 clientes con mayor valor de id.

SELECT -- Seleccionamos las columnas que nos interesan
	first_name,
	last_name
FROM -- De la table correspondiente
	customer c
ORDER BY -- Establecemos el filtro
	customer_id DESC -- Ordenamos por las ultimas
	limit 10; -- Limitamos a los 10 últimos registros

-- 17. Encuentra el nombre y apellido de los actores que aparecen en la película con título ‘Egg Igby’.
SELECT  -- Seleccionamos las columnas que nos interesan
	a.first_name, 
	a.last_name, 
	f.title
FROM -- De la table correspondiente
	actor a
INNER JOIN -- Utilizamos este Join para que exista la coincidencia en ambas tablas
	film_actor fa 
ON 
	a.actor_id = fa.actor_id
INNER JOIN  -- Utilizamos este Join para que exista la coincidencia en ambas tablas
	film f 
ON 
	fa.film_id = f.film_id
WHERE -- Establecemos el filtro, usando el titulo para que sea fácilmente reutilizable para otras peliculas
	f.title= 'EGG IGBY';

-- 18. Selecciona todos los nombres de las películas únicos.

SELECT DISTINCT -- Seleccionamos las columnas que nos interesan, se añade la Clausula DISTINCT para garantizar que sean únicos
    title
FROM -- De la table correspondiente
    film;

-- 19. Encuentra el título de las películas que son comedias y tienen una duración mayor a 180 minutos en la tabla “film”.

/* RESUMEN DE TODA LA QUERY: Con la subconsulta se obtiene el category_id de la categoría "Comedy"
 se utiliza este category_id para filtrar los film_id en la tabla film_category 
 despues se seleccionan los títulos de las películas de la tabla film que tienen una duracion mayor a 180 minutos
 y pertenecen a la categoría de comedia */

SELECT 
	title
FROM 
	film
WHERE
	film_id 
	IN (
    		SELECT 
			film_id
    		FROM 
			film_category
		WHERE
			category_id = (
        			SELECT 
					category_id
        			FROM 
					category
        			WHERE 
					name = 'Comedy'
				)
	)
AND length > 180;

-- 20. Encuentra las categorías de películas que tienen un promedio de duración superior a 110 minutos y muestra el nombre de la categoría junto con el promedio de duración.

 -- se necesita unir las tablas film, film_category y category, y luego agrupar por categoría calculando el promedio de duración, se usa INNER JOIN porque devuelve solo los resultados donde haya coincidencia
 
SELECT 
	c.name AS category_name, 
	AVG(f.length) AS average_duration
FROM 
	category c
INNER JOIN 
	film_category fc 
ON 
	c.category_id = fc.category_id
INNER JOIN 
	film f 
ON 
	fc.film_id = f.film_id
GROUP BY 
	c.category_id, c.name
HAVING 
	AVG(f.length) > 110;

-- 21. ¿Cuál es la media de duración del alquiler de las películas?

SELECT -- Seleccionamos las columnas que nos interesan
    AVG(rental_duration) AS "Media duración alquiler"
FROM -- De la table correspondiente
    film;

-- 22. Crea una columna con el nombre y apellidos de todos los actores y actrices.

SELECT -- Seleccionamos las columnas que nos interesan
    CONCAT(first_name, ' ', last_name) AS "Nombre Completo" -- Concatemos dos columnas en una sola y le damos un alias en castellano
FROM -- De la table correspondiente
    actor;

-- 23. Números de alquiler por día, ordenados por cantidad de alquiler de forma descendente.

SELECT -- Seleccionamos las columnas que nos interesan
    rental_date::date AS "Fecha alquiler", --Truncamos rental_date para solo trabajar con la fecha, sin hora
    COUNT(*) AS "Cantidad de alquileres" -- Contamos todos los registros
FROM -- De la table correspondiente
    rental
GROUP BY -- Agrupamos por fecha
    rental_date::date
ORDER BY -- Ordenamos para cumplir criterio del enunciado
    "Cantidad de alquileres" DESC;

-- 24. Encuentra las películas con una duración superior al promedio.

SELECT -- Seleccionamos las columnas que nos interesan
    title, 
    length
FROM -- De la table correspondiente
    film
WHERE -- Establecemos el filtro
    length > ( --Hacemos la subconsulta para averiguar el promedio de duración
    	SELECT 
    		AVG(length) 
    	FROM film
    	);

-- 25. Averigua el número de alquileres registrados por mes.

SELECT -- Seleccionamos las columnas que nos interesan
    TO_CHAR(rental_date, 'YYYY-MM') AS "Mes", -- Transformamos la fecha en una cadena de caracteres, con formato 'YYYY-MM'
    COUNT(*) AS "Numero de alquileres" -- Contamos todos los registros
FROM -- De la table correspondiente
    rental
GROUP BY -- Establecemos como se agrupan
    TO_CHAR(rental_date, 'YYYY-MM')
ORDER BY -- Y como las ordenamos
    "Mes";

-- 26. Encuentra el promedio, la desviación estándar y varianza del total pagado.

-- Hago una consulta  multiple para responder a las tres cosas en una sola tabla, ponemos alias a las columnas para nombrarlas en castallano

SELECT 
    AVG(amount) AS "Promedio", -- Pago promedio                 
    STDDEV(amount) AS "Desviación Standard", --Desviación estandar    
    VAR_SAMP(amount) AS "Varianza" -- Varianza              
FROM  -- De la table correspondiente
    payment;

-- 27. ¿Qué películas se alquilan por encima del precio medio?

SELECT -- Seleccionamos las columnas que nos interesan 
	title, 
	rental_rate 
FROM -- De la table correspondiente
	film 
WHERE -- Establecemos criterio
	rental_rate > ( -- Subconsulta para averiguar el promedio del precio del aquiler
	SELECT 
		AVG(rental_rate) 
	FROM 
		film
	);

-- 28. Muestra el id de los actores que hayan participado en más de 40 películas.

SELECT -- Seleccionamos las columnas que nos interesan
	fa.actor_id, 
	COUNT(fa.film_id) AS "Conteo Peliculas" 
FROM -- De la table correspondiente
    film_actor fa
GROUP BY -- Agrupamos por id
    fa.actor_id
HAVING -- Establecemos el filtro en las 40 peliculas
    COUNT(fa.film_id) > 40;

-- 29. Obtener todas las películas y, si están disponibles en el inventario, mostrar la cantidad disponible.

SELECT -- Seleccionamos las columnas que nos interesan
	f.title, 
	COUNT(i.inventory_id) AS "Unidades Stock"
FROM -- De la table correspondiente
	film f
LEFT JOIN -- Usamos este JOIN para que se muestren todas las peliculas, y la cantidad existente en el inventario
	inventory i ON f.film_id = i.film_id
GROUP BY -- Establecemos como agruparlas
	f.title;

-- 30. Obtener los actores y el número de películas en las que ha actuado.

 SELECT -- Seleccionamos las columnas que nos interesan
	CONCAT(a.first_name, ' ', a.last_name) AS "Nombre Actor", --Creamos un campo con nombre y apellido
	COUNT(fa.film_id) as "Conteo Peliculas" --Contamos las peliculas en las que aparece
FROM -- De la table correspondiente
	actor a
LEFT JOIN -- Usamos este JOIN para que salgan todos los actores, y las coincidencias con las peliculas que ha actuado
	film_actor fa ON a.actor_id = fa.actor_id
GROUP BY -- Establecemos como agruparlas
	a.first_name, 
	a.last_name;

--31. Obtener todas las películas y mostrar los actores que han actuado en ellas, incluso si algunas películas no tienen actores asociados.

SELECT -- Seleccionamos las columnas que nos interesan
    f.title AS "Titulo", 
    CONCAT(a.first_name, ' ', a.last_name) AS "Nombre Actor"
FROM -- De la table correspondiente
    film f
LEFT JOIN -- Usamos este JOIN para que salgan todas las peliculas
	film_actor fa 
ON 
	f.film_id = fa.film_id
LEFT JOIN --Usamos este JOIN para que salgan todos los actores incluso si no tienen pelicula
	actor a 
ON 
	fa.actor_id = a.actor_id
ORDER BY -- Establecemos el orden en el que se muestran
    f.title, a.last_name;

-- 32. Obtener todos los actores y mostrar las películas en las que han actuado, incluso si algunos actores no han actuado en ninguna película.

SELECT -- Seleccionamos las columnas que nos interesan
    f.title AS "Titulo", 
    CONCAT(a.first_name, ' ', a.last_name) AS "Nombre Actor"
FROM -- De la table correspondiente
    film f
LEFT JOIN -- Usamos este JOIN para que salgan todas las peliculas
	film_actor fa 
ON 
	f.film_id = fa.film_id
LEFT JOIN --Usamos este JOIN para que salgan todos los actores incluso si no tienen pelicula
	actor a 
ON 
	fa.actor_id = a.actor_id
ORDER BY -- Establecemos el orden en el que se muestran
    f.title, a.last_name;

33. Obtener todas las películas que tenemos y todos los registros de alquiler.

SELECT -- Seleccionamos las columnas que nos interesan
	f.title AS "Titulo Pelicula", 
    	r.rental_date
FROM -- De la table correspondiente
	film f
LEFT JOIN --Usamos este JOIN para que salgan todas las peliculas del inventario
	inventory i 
ON 
	f.film_id = i.film_id
LEFT JOIN --Usamos este JOIN para que salgan las que se han alquilado
	rental r 
ON 
	i.inventory_id = r.inventory_id;

-- 34. Encuentra los 5 clientes que más dinero se hayan gastado con nosotros.

SELECT -- Seleccionamos las columnas que nos interesan
	c.customer_id, 
	CONCAT(c.first_name, ' ', c.last_name) AS "Nombre Cliente", -- Concatenamos nombre y apellido en un solo campo
	SUM(p.amount) AS "Total Gastado" --Sumamos todos los pagos
FROM -- De la table correspondiente
	customer c
INNER JOIN 	--Para que solo devuelva las coincidencias de ambas tablas
	payment p 
ON 
	c.customer_id = p.customer_id
GROUP BY -- Establecemos el filtro por el que se agrupan
	c.customer_id, c.first_name, c.last_name
ORDER BY -- Establecemos el orden, descendente
	"Total Gastado"  DESC
LIMIT 5; --Limitamos a 5 para cumplir con el enunciado

-- 35. Selecciona todos los actores cuyo primer nombre es 'Johnny'.

SELECT -- Seleccionamos las columnas que nos interesan
	actor_id, 
	first_name AS "Nombre", 
	last_name AS "Apellido"
FROM -- De la table correspondiente
	actor 
WHERE -- Establecemos el filtro de esta manera para que sea reutilizable para otras búsquedas
	first_name = 'JOHNNY';

-- 36. Renombra la columna “first_name” como Nombre y “last_name” como Apellido.

SELECT -- Seleccionamos las columnas que nos interesan
	first_name AS "Nombre", 
	last_name AS "Apellido" 
FROM -- De la table correspondiente
	actor;

-- 37. Encuentra el ID del actor más bajo y más alto en la tabla actor.

SELECT -- Seleccionamos las columnas que nos interesan en una sola consulta, con los alias autoexplicativos
	MIN(actor_id) AS "Id más bajo",
	MAX(actor_id) AS "Id más alto"
FROM -- De la table correspondiente
	actor;

-- 38. Cuenta cuántos actores hay en la tabla “actor”.

SELECT -- Seleccionamos las columnas que nos interesan
	COUNT(*) AS "Total de Actores" -- Contamos los registros
FROM -- De la table correspondiente
	actor;

-- 39. Selecciona todos los actores y ordénalos por apellido en orden ascendente.

SELECT -- Seleccionamos las columnas que nos interesan
	actor_id, 
	first_name, 
	last_name 
FROM -- De la table correspondiente
	actor
ORDER BY -- Establecemos el filtro de orden
	last_name ASC;

-- 40. Selecciona las primeras 5 películas de la tabla “film”.

 SELECT -- Seleccionamos las columnas que nos interesan
 	title 
 FROM -- De la table correspondiente
 	film
 ORDER BY -- Establecemos el filtro de orden
 	film_id 
 LIMIT 5; -- Limitamos a los registros del enunciado

-- 41. Agrupa los actores por su nombre y cuenta cuántos actores tienen el mismo nombre. ¿Cuál es el nombre más repetido?

/*RESUMEN QUERY: La consulta principal agrupa los actores por su primer nombre usando GROUP BY first_name. La subconsulta calcula la máxima cantidad de veces que un nombre se repite utilizando MAX("Conteo Nombre"). La cláusula HAVING filtra únicamente aquellos nombres cuya cantidad de repeticiones es igual a la máxima obtenida en la subconsulta.

WITH nombre_conteo AS (
    SELECT 
        first_name, 
        COUNT(*) AS "Conteo Nombre"
    FROM 
    	actor
    GROUP BY 
    	first_name
)
SELECT
	first_name, 
	"Conteo Nombre"
FROM
	nombre_conteo
WHERE
	"Conteo Nombre" = (
		SELECT 
			MAX("Conteo Nombre") 
		FROM 
			nombre_conteo
		)
ORDER BY 
	first_name ASC;


-- 42. Encuentra todos los alquileres y los nombres de los clientes que los realizaron.

-- Identificamos los alquileres por su  id (rental_id) y los relacionamos con los nombres (completos en mi caso) de los clientes mediante un JOIN de las tablas rental y customer

SELECT 
	r.rental_id, 
	CONCAT(c.first_name, ' ', c.last_name) AS "Nombre cliente"
FROM 
	rental r
JOIN 
	customer c 
ON 
	r.customer_id = c.customer_id;

-- 43. Muestra todos los clientes y sus alquileres si existen, incluyendo aquellos que no tienen alquileres.

-- Seleccionamos nombre completo (Concatenamos nombre y apellido) y el total de alquileres (mediante rental_id) usamos un LEFT JOIN para garantizar que aparecen todos los clientes y los agrupamos por su nombre ("Nombre cliente") para crear un único registro por cada uno

SELECT 
	CONCAT(c.first_name, ' ', c.last_name) AS "Nombre Cliente", 
	COUNT (r.rental_id) AS "Total Alquileres"
FROM 
	customer c
LEFT JOIN 
	rental r 
ON 
	c.customer_id = r.customer_id
GROUP BY
	"Nombre Cliente";

-- 44. Realiza un CROSS JOIN entre las tablas film y category. ¿Aporta valor
esta consulta? ¿Por qué? Deja después de la consulta la contestación.

SELECT 
	f.title, 
	c.name AS "Nombre Categoria" 
FROM 
	film f 
CROSS JOIN 
	category c;

-- No tiene sentido ni aporta ningún valor, ya que el CROSS JOIN únicamente devuelve la combinación de cada una de las filas de la primera tabla (film) con la segunda (category) sin que ninguna condición relacione ambos datos

-- 45. Encuentra los actores que han participado en películas de la categoría 'Action'.
-- Seleccionamos los nombres (completos) de los actores como valores únicos, y vamos haciendo distintos joins recorriendo el camino hasta llegar a la tabla donde se muestra la categoría, para filtrar solo por "Action"

SELECT DISTINCT 
	CONCAT(a.first_name, ' ', a.last_name) AS "Nombre Actor"
FROM 
	actor a
INNER JOIN 
	film_actor fa 
ON 
	a.actor_id = fa.actor_id
INNER JOIN 
	film_category fc 
ON 
	fa.film_id = fc.film_id
INNER JOIN 
	category c
ON 
	fc.category_id = c.category_id
WHERE 
	c.name = 'Action';

-- 46. Encuentra todos los actores que no han participado en películas.

-- Realizamos la consulta de todos los actores que han participado en peliculas y tras el LEFT JOIN (Para que aparezcan todos los actores, que es la tabla principal), establecemos mediante la clausula IS NULL el criterio de que no hayan aparecido en peliculas

 SELECT 
 	CONCAT(a.first_name, ' ', a.last_name) AS actor_name
FROM
	actor a
LEFT JOIN
	film_actor fa 
ON 
	a.actor_id = fa.actor_id
WHERE
	fa.film_id IS NULL


-- 47. Selecciona el nombre de los actores y la cantidad de películas en las que han participado.

-- Seleccionamos el nombre (Completo en este caso), y el conteo de las peliculas mediante un LEFT JOIN de la tabla Actor (tabla ppal) y film_actor, para por ultimo agrupar por ID, nombre y apellido

SELECT 
	CONCAT(a.first_name, ' ', a.last_name) AS "Nombre Actor", 
	COUNT(fa.film_id) AS "Peliculas"
FROM 
	actor a
LEFT JOIN 
	film_actor fa 
ON 
	a.actor_id = fa.actor_id
GROUP BY 
	a.actor_id, a.first_name, a.last_name;


-- 48. Crea una vista llamada “actor_num_peliculas” que muestre los nombres de los actores y el número de películas en las que han participado.

-- Añadimos el comando CREATE VIEW actor_num_peliculas, al principio de toda la query anterior para crear la vista

CREATE VIEW actor_num_peliculas AS
SELECT 
	CONCAT(a.first_name, ' ', a.last_name) AS "Nombre Actor", 
	COUNT(fa.film_id) AS "Numero Peliculas"
FROM 
	actor a
LEFT JOIN 
	film_actor fa 
ON 
	a.actor_id = fa.actor_id
GROUP BY 
	a.actor_id, a.first_name, a.last_name;

-- Por ultimo para comprobar que la vista funciona y muestra lo que queremos, realizamos esta query:

SELECT *
FROM 
	actor_num_peliculas;

49. Calcula el número total de alquileres realizados por cada cliente.

SELECT -- Seleccionamos las columnas que nos interesan
    CONCAT(c.first_name, ' ', c.last_name) AS "Nombre Cliente", 
    COUNT(r.rental_id) AS "Total Alquileres"
FROM -- De la table correspondiente
	customer c
LEFT JOIN -- Para garantizar que aparecen todos los clientes y se añaden los alquileres
	rental r 
ON 
	c.customer_id = r.customer_id
GROUP BY -- Establecemos el filtro por el que agrupamos
	c.customer_id, 
	c.first_name, 
	c.last_name;

-- 50. Calcula la duración total de las películas en la categoría 'Action'.

SELECT -- Seleccionamos las columnas que nos interesan
	SUM(f.length) AS "Duración Total"
FROM -- De la table correspondiente
	film f
INNER JOIN --Cruzamos con la tabla intermedia
	film_category fc 
ON 
	f.film_id = fc.film_id
INNER JOIN --Cruzamos con la tabla final
	category c 
ON 
	fc.category_id = c.category_id
WHERE -- Establecemos el filtro
	c.name = 'Action'

-- 51. Crea una tabla temporal llamada “cliente_rentas_temporal” para almacenar el total de alquileres por cliente.

--Creamos la tabla temporal 
WITH cliente_rentas_temporal AS (
    SELECT -- Seleccionamos las columnas que nos interesan
        customer_id, 
        COUNT(rental_id) AS "Alquileres Totales"
    FROM -- De la table correspondiente
	rental 
    GROUP BY -- Establecemos el filtro de agrupación
	customer_id
)
--Para comprobar que funciona, seleccionamos todas las columnas de la tabla temporal
SELECT *
FROM 
	cliente_rentas_temporal;

-- 52. Crea una tabla temporal llamada “peliculas_alquiladas” que almacene las películas que han sido alquiladas al menos 10 veces.

--Creamos la tabla temporal 

WITH peliculas_alquiladas_cte AS (
    SELECT -- Seleccionamos las columnas que nos interesan
        i.film_id, 
        f.title, 
        COUNT(r.rental_id) AS total_alquileres
    FROM -- De la table correspondiente 
	rental r
    INNER JOIN --Cruzamos con la tabla inventario
	inventory i 
    ON 
	r.inventory_id = i.inventory_id
    INNER JOIN -- Y con la de peliculas
	film f 
    ON 
	i.film_id = f.film_id
    GROUP BY --Agrupamos por id y titulo
	i.film_id, f.title
    HAVING 
	COUNT(r.rental_id) >= 10 -- Establecemos el filtro en 10 veces, hecho así para poder reutilizarlo si cambia el numero
--Comprobamos que la tabla temporal funciona

SELECT * 
FROM 
	peliculas_alquiladas_cte;


-- 53. Encuentra el título de las películas que han sido alquiladas por el cliente con el nombre ‘Tammy Sanders’ y que aún no se han devuelto. Ordena los resultados alfabéticamente por título de película.

SELECT -- Seleccionamos las columnas que nos interesan
	f.title 
FROM -- De la table correspondiente
	rental r
INNER JOIN -- Cruzamos con la primera tabla
	inventory i 
ON 
	r.inventory_id = i.inventory_id
INNER JOIN -- Cruzamos con la siguiente tabla
	film f 
ON 
	i.film_id = f.film_id
INNER JOIN --Cruzamos con la tercera tabla
	customer c 
ON 
	r.customer_id = c.customer_id
WHERE -- Establecemos el filtro del nombre
	CONCAT(c.first_name, ' ', c.last_name) = 'TAMMY SANDERS' 
AND -- Y para que no se hayan devuelto
	r.return_date IS NULL
ORDER BY -- Ordenamos por titulo
	f.title;

-- 54. Encuentra los nombres de los actores que han actuado en al menos una película que pertenece a la categoría ‘Sci-Fi’. Ordena los resultados alfabéticamente por apellido.

SELECT DISTINCT -- Seleccionamos las columnas que nos interesan, con la clausula DISTINCT para que solo aparezcan una vez
	a.first_name AS "Nombre",
	a.last_name AS "Apellido"
FROM -- De la table correspondiente
	actor a
INNER JOIN 
	film_actor fa ON a.actor_id = fa.actor_id
INNER JOIN 
	film f ON fa.film_id = f.film_id
INNER JOIN 
	film_category fc ON f.film_id = fc.film_id
INNER JOIN 
	category c ON fc.category_id = c.category_id
WHERE -- Establecemos el filtro en la categoria
	c.name = 'Sci-Fi'
ORDER BY -- Establecemos el filtro por el que ordenamos 
	a.last_name, a.first_name;

-- 55. Encuentra el nombre y apellido de los actores que han actuado en películas que se alquilaron después de que la película ‘Spartacus Cheaper’ se alquilara por primera vez. Ordena los resultados alfabéticamente por apellido.

WITH -- Creamos una CTE para ver cuando se alquiló la pelicula por primera vez, hacemos los JOIN para poder llegar a hacer la búsqueda por el titulo
	primer_alquiler_spartacus AS (
    	SELECT 
    		MIN(r.rental_date) AS "Primer Alquiler"
    	FROM 
    		rental r
    	INNER JOIN 
    		inventory i 
    	ON 
    		r.inventory_id = i.inventory_id
    	INNER JOIN 
    		film f 
    	ON 
    		i.film_id = f.film_id
    	WHERE 
    		f.title = 'SPARTACUS CHEAPER'
)
SELECT DISTINCT -- Seleccionamos las columnas que nos interesan como valores únicos (DISTINCT)
	a.first_name AS "Nombre",
	a.last_name AS "Apellido"
FROM -- De la table correspondiente
	actor a
INNER JOIN 
	film_actor fa 
ON 
	a.actor_id = fa.actor_id
INNER JOIN 
	inventory i 
ON 
	fa.film_id = i.film_id
INNER JOIN 
	rental r 
ON 
	i.inventory_id = r.inventory_id
WHERE -- Establecemos el filtro, para poder trabajar con la subconsulta primera
	r.rental_date > (
	SELECT 
		"Primer Alquiler"
	FROM 
		primer_alquiler_spartacus
	)
ORDER BY -- Ordenamos por apellido de los actores
	a.last_name;

-- 56. Encuentra el nombre y apellido de los actores que no han actuado en ninguna película de la categoría ‘Music’.

SELECT DISTINCT  -- Seleccionamos las columnas que nos interesan como valores unicos
 	CONCAT(a.first_name, ' ', a.last_name) AS "Nombre Actor"
FROM -- De la table correspondiente
	actor a
WHERE -- Establecemos el criterio
	a.actor_id NOT IN ( --Mediante una subconsulta para sacar los actores que han actuado en peliculas de la categoría 'Music'
        SELECT 
		fa.actor_id
        FROM 
		film_actor fa
        JOIN 
		film_category fc 
	ON
		fa.film_id = fc.film_id
        JOIN 
		category c 
	ON 
		fc.category_id = c.category_id
        WHERE 
		c.name = 'Music'
   );

-- 57. Encuentra el título de todas las películas que fueron alquiladas por más de 8 días.

SELECT DISTINCT -- Seleccionamos las columnas que nos interesan 
    f.title 
FROM -- De la table correspondiente
    rental r
INNER JOIN 
    inventory i 
ON 
    r.inventory_id = i.inventory_id
INNER JOIN 
    film f 
ON 
    i.film_id = f.film_id
WHERE
    r.return_date IS NOT NULL -- Filtra solo los registros con devolución
    AND EXTRACT(DAY FROM (r.return_date - r.rental_date)) > 8 --Una vez tenemos los registros de devolución buscamos cuales son mayores a 8 días
ORDER BY -- Establecemos el filtro para ordenar por titulo de pelicula
    f.title;

-- 58. Encuentra el título de todas las películas que son de la misma categoría que ‘Animation’.

SELECT DISTINCT -- Seleccionamos las columnas que nos interesan
	f.title
FROM -- De la table correspondiente
	film f
INNER JOIN -- Hacemos el JOIN con la tabla de categorías para cruzarlas
	film_category fc 
ON 
	f.film_id = fc.film_id
WHERE -- Establecemos el filtro
	fc.category_id = ( --Sacamos una subconsulta para saber las peliculas que son de animación
        SELECT category_id
        FROM category
        WHERE name = 'Animation'
        );

-- 59. Encuentra los nombres de las películas que tienen la misma duración que la película con el título ‘Dancing Fever’. Ordena los resultados alfabéticamente por título de película.

SELECT -- Seleccionamos las columnas que nos interesan
	title 
FROM -- De la table correspondiente
	film 
WHERE length = ( -- Realizamos la subconsulta para saber la duración de 'Dacing Fever'
    SELECT length 
    FROM film 
    WHERE title = 'DANCING FEVER'
)
ORDER BY -- Ordenamos por titulo
	title;

-- 60. Encuentra los nombres de los clientes que han alquilado al menos 7 películas distintas. Ordena los resultados alfabéticamente por apellido.

SELECT DISTINCT -- Seleccionamos las columnas que nos interesan, como valores unicos
	c.first_name AS "Nombre", 
	c.last_name AS "Apellido"
FROM -- De la table correspondiente
	customer c
INNER JOIN -- Juntamos con la tabla del alquileres
	rental r 
ON 
	c.customer_id = r.customer_id
INNER JOIN -- De las que tenemos en el inventario
	inventory i 
ON 
	r.inventory_id = i.inventory_id
INNER JOIN
	film f 
ON 
	i.film_id = f.film_id
GROUP BY -- Agrupamos por cliente
	c.customer_id, 
	c.first_name, 
	c.last_name
HAVING COUNT(DISTINCT f.film_id) >= 7 -- Establecemos el criterio numerico
ORDER BY  -- Ordenamos por apellido del cliente
	c.last_name;

-- 61. Encuentra la cantidad total de películas alquiladas por categoría y muestra el nombre de la categoría junto con el recuento de alquileres.

SELECT -- Seleccionamos las columnas que nos interesan
	cat.name AS "Categoría Pelicula", 
	COUNT(r.rental_id) AS "Recuento Alquileres"
FROM -- De la table correspondiente
	rental r
INNER JOIN 
	inventory i 
ON 
	r.inventory_id = i.inventory_id
INNER JOIN
	film f 
ON 
	i.film_id = f.film_id
INNER JOIN
	film_category fc 
ON 
	f.film_id = fc.film_id
INNER JOIN 
	category cat 
ON 
	fc.category_id = cat.category_id
GROUP BY -- Establecemos el filtro de agrupacióon
	cat.name
ORDER BY -- Ordenamos por las veces que se han alquilado
	"Recuento Alquileres" DESC;


-- 62. Encuentra el número de películas por categoría estrenadas en 2006.

SELECT -- Seleccionamos las columnas que nos interesan
	cat.name AS "Categoria Pelicula", 
	COUNT(f.film_id) AS "Numero Peliculas"
FROM -- De la table correspondiente
	film f
INNER JOIN 
	film_category fc 
ON
	f.film_id = fc.film_id
INNER JOIN 
	category cat 
ON 
	fc.category_id = cat.category_id
WHERE -- Establecemos el filtro 
	f.release_year = 2006
GROUP BY -- Establecemos como se agrupan
	cat.name
ORDER BY -- Establecemos el orden
	"Numero Peliculas" DESC;

-- 63. Obtén todas las combinaciones posibles de trabajadores con las tiendas que tenemos.

SELECT -- Seleccionamos las columnas que nos interesan
    s.staff_id, 
    CONCAT(s.first_name, ' ', s.last_name) AS "Nombre Empleado", 
    st.store_id
FROM -- De la table correspondiente
	staff s
CROSS JOIN -- Hacemos este Join para obtener todas las combinaciones
	store st
ORDER BY -- Establecemos el filtro de ordenación
	s.staff_id, st.store_id;

-- 64. Encuentra la cantidad total de películas alquiladas por cada cliente y muestra el ID del cliente, su nombre y apellido junto con la cantidad de películas alquiladas.

SELECT -- Seleccionamos las columnas que nos interesan
    c.customer_id,
    c.first_name AS "Nombre",
    c.last_name AS "Apellido", 
    COUNT(r.rental_id) AS "Alquileres totales"
FROM -- De la table correspondiente
	customer c
LEFT JOIN 
	rental r 
ON 
	c.customer_id = r.customer_id
GROUP BY -- Establecemos el filtro de agruoación
	c.customer_id, 
	c.first_name, 
	c.last_name
ORDER BY -- Establecemos el orden para cumplir el enunciado 
	"Alquileres totales" DESC;
